{"version":3,"file":"index.js","sources":["../../../../src/Kit/DataDisplay/ItemList/index.tsx"],"sourcesContent":["import React, {useState} from 'react';\nimport {css, styled} from 'styled-components';\nimport {KitItemListProps} from './types';\nimport theme from '@theme/index';\nimport {KitCheckbox, KitTag} from '@kit/DataEntry/';\nimport {KitTypography} from '@kit/General/';\nimport {RightOutlined, EyeOutlined} from '@ant-design/icons';\n\nconst StyledItemList = styled.div<{\n    $gridTemplateColumns: string;\n    $isDisabled: boolean;\n    $isClickable: boolean;\n    $shouldHaveGapBetweenText: boolean;\n}>`\n    display: grid;\n    grid-template-columns: ${props => props.$gridTemplateColumns};\n    align-items: center;\n    min-height: 75px;\n    padding: 0px 8px;\n    background-color: ${theme.color.neutral.typography.white};\n    box-shadow: 0px 3px 8px 0px rgba(0, 0, 0, 0.1);\n    border: 1px solid ${theme.color.neutral.typography.white};\n    border-radius: 7px;\n\n    &:hover {\n        border: 1px solid ${theme.color.primary.blue400};\n    }\n\n    &:focus {\n        border-style: dashed;\n    }\n\n    ${props =>\n        props.$isDisabled &&\n        css`\n            background-color: ${theme.color.primary.blue100};\n            border: 1px solid ${theme.color.primary.blue100};\n            pointer-events: none;\n\n            .kit-item-list-text-container .kit-item-list-text {\n                color: ${theme.color.primary.blue200};\n            }\n        `}\n\n    ${props =>\n        props.$isClickable &&\n        css`\n            cursor: pointer;\n        `}\n\n    .kit-item-list-picture-container {\n        width: 48px;\n        height: 48px;\n        border: 1px solid ${theme.color.neutral.typography.black60};\n        border-radius: 7px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        overflow: hidden;\n\n        &:not(:first-child) {\n            margin: 0px 0px 0px 10px;\n        }\n\n        &.noBorder {\n            border-color: transparent;\n        }\n\n        &.kit-item-list-icon {\n            .anticon {\n                font-size: 2rem;\n                text-align: center;\n                width: 100%;\n                height: 100%;\n                display: inline-flex;\n                align-items: center;\n                justify-content: center;\n            }\n        }\n\n        .kit-item-list-image-container {\n            display: flex;\n            align-items: center;\n            justify-content: center;\n\n            img {\n                width: auto;\n                max-width: 100%;\n                max-height: 100%;\n            }\n        }\n    }\n\n    .kit-item-list-text-container {\n        display: flex;\n        padding: 10px 20px;\n        flex-direction: column;\n        align-items: flex-start;\n        flex: 1 0 0;\n\n        ${props =>\n            props.$shouldHaveGapBetweenText &&\n            css`\n                gap: 5px;\n            `}\n\n        .kit-item-list-text {\n            color: ${theme.color.primary.blue600};\n            font-size: ${theme.typography.fontSize5};\n            margin-bottom: 0px;\n\n            &.kit-item-list-title {\n                font-weight: ${theme.typography.boldFontWeight};\n            }\n\n            &.kit-item-list-description {\n                font-weight: ${theme.typography.regularFontWeight};\n\n                .ant-typography-expand {\n                    visibility: hidden;\n                }\n            }\n        }\n\n        .kit-item-list-description-container {\n            position: relative;\n        }\n\n        .kit-item-list-description-collexp {\n            color: ${theme.color.primary.blue600};\n\n            &:hover {\n                color: ${theme.color.primary.blue400};\n            }\n\n            &.kit-item-list-description-collapse {\n                float: right;\n            }\n\n            &.kit-item-list-description-expand {\n                position: absolute;\n                right: 0;\n                bottom: 0;\n            }\n        }\n    }\n\n    .kit-item-list-tag {\n        ${props =>\n            props.$isDisabled &&\n            css`\n                opacity: 0.35;\n            `}\n\n        &:last-child .ant-tag {\n            margin-inline-end: 0px;\n        }\n\n        &:not(:last-child) .ant-tag {\n            margin-inline-end: 10px;\n        }\n    }\n\n    .kit-item-list-rafter {\n        color: ${theme.color.neutral.gray.gray400};\n        font-size: 14px;\n\n        &:hover {\n            color: ${theme.color.primary.blue400};\n            cursor: pointer;\n        }\n    }\n`;\n\nexport const KitItemList: React.FunctionComponent<KitItemListProps> = ({\n    title,\n    description,\n    picture,\n    onSelectChange,\n    tagNumber,\n    onRafterClick,\n    isDisabled = false,\n    onClick,\n    ...props\n}) => {\n    const [descriptionVisible, setDescriptionVisible] = useState(false);\n    const [isDescriptionEllipsis, setIsDescriptionEllipsis] = useState(false);\n\n    const hasTitle = title !== undefined;\n    const hasDescription = description !== undefined;\n    const hasPicture = picture !== undefined;\n    const hasTag = tagNumber !== undefined;\n    const isClickable = onClick !== undefined;\n    const isSelectable = onSelectChange !== undefined;\n    const hasRafter = onRafterClick !== undefined;\n\n    const generateGridTemplateColumns = () => {\n        let gridTemplateColumns = '';\n\n        // Checkbox\n        gridTemplateColumns += isSelectable ? ' min-content' : '';\n\n        // Picture\n        gridTemplateColumns += hasPicture ? ' min-content' : '';\n\n        // Text (Use minmax to fix ellipsis)\n        gridTemplateColumns += ' minmax(0px, auto)';\n\n        // Tag\n        gridTemplateColumns += hasTag ? ' min-content' : '';\n\n        // Rafter\n        gridTemplateColumns += hasRafter ? ' min-content' : '';\n\n        return gridTemplateColumns;\n    };\n\n    const getCheckbox = () => {\n        return (\n            isSelectable && (\n                <div>\n                    <KitCheckbox\n                        disabled={isDisabled}\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                            onSelectChange && onSelectChange(e);\n                        }}\n                    />\n                </div>\n            )\n        );\n    };\n\n    const getPicture = () => {\n        const pictureJsx = picture as JSX.Element;\n\n        if (!pictureJsx || !pictureJsx.type) {\n            return null;\n        }\n\n        let noBorder = false;\n        let cloneProps = {};\n        let wrapperClassName = 'kit-item-list-picture-container';\n\n        switch (pictureJsx.type.displayName) {\n            case 'KitImage':\n                cloneProps = {\n                    preview: {\n                        mask: <EyeOutlined />\n                    },\n                    width: '100%',\n                    height: '100%',\n                    rootClassName: (pictureJsx.props.rootClassName || '') + ' kit-item-list-image-container'\n                };\n                wrapperClassName += ' kit-item-list-image';\n                break;\n            case 'KitIcon':\n                noBorder = true;\n                cloneProps = {\n                    on: true\n                };\n                wrapperClassName += ' kit-item-list-icon';\n                break;\n            case 'KitAvatar':\n                break;\n        }\n\n        let Component = React.cloneElement(pictureJsx, cloneProps);\n\n        return <div className={`${wrapperClassName} ${noBorder ? 'noBorder' : ''}`}>{Component}</div>;\n    };\n\n    const getContent = () => {\n        return (\n            <div className=\"kit-item-list-text-container\">\n                <KitTypography.Text\n                    className=\"kit-item-list-text kit-item-list-title\"\n                    size=\"large\"\n                    weight=\"bold\"\n                    ellipsis={{rows: 1, tooltip: true}}\n                >\n                    {title}\n                </KitTypography.Text>\n\n                <div className=\"kit-item-list-description-container\">\n                    <KitTypography.Paragraph\n                        className=\"kit-item-list-text kit-item-list-description\"\n                        size=\"large\"\n                        weight=\"regular\"\n                        ellipsis={\n                            descriptionVisible\n                                ? false\n                                : {\n                                      rows: 2,\n                                      expandable: true,\n                                      onEllipsis: () => setIsDescriptionEllipsis(true)\n                                  }\n                        }\n                    >\n                        {description}\n                        {descriptionVisible && (\n                            <KitTypography.Link\n                                className=\"kit-item-list-description-collexp kit-item-list-description-collapse\"\n                                onClick={e => {\n                                    e.stopPropagation();\n                                    setDescriptionVisible(false);\n                                }}\n                            >\n                                Less\n                            </KitTypography.Link>\n                        )}\n                    </KitTypography.Paragraph>\n                    {isDescriptionEllipsis && !descriptionVisible && (\n                        <KitTypography.Link\n                            className=\"kit-item-list-description-collexp kit-item-list-description-expand\"\n                            onClick={e => {\n                                e.stopPropagation();\n                                setDescriptionVisible(true);\n                            }}\n                        >\n                            More\n                        </KitTypography.Link>\n                    )}\n                </div>\n            </div>\n        );\n    };\n\n    const getTag = () => {\n        return (\n            hasTag && (\n                <div className=\"kit-item-list-tag\">\n                    <KitTag color=\"blue\">{tagNumber}</KitTag>\n                </div>\n            )\n        );\n    };\n\n    const getRafter = () => {\n        return (\n            hasRafter && (\n                <div\n                    className=\"kit-item-list-rafter\"\n                    onClick={e => {\n                        e.stopPropagation();\n                        onRafterClick && onRafterClick();\n                    }}\n                >\n                    <RightOutlined />\n                </div>\n            )\n        );\n    };\n\n    return (\n        <StyledItemList\n            $isDisabled={isDisabled}\n            $isClickable={isClickable}\n            $shouldHaveGapBetweenText={hasTitle && hasDescription}\n            onClick={e => {\n                e.stopPropagation();\n                onClick && onClick();\n            }}\n            $gridTemplateColumns={generateGridTemplateColumns()}\n            {...props}\n        >\n            {getCheckbox()}\n            {getPicture()}\n            {getContent()}\n            {getTag()}\n            {getRafter()}\n        </StyledItemList>\n    );\n};\n\nKitItemList.displayName = 'KitItemList';\n"],"names":["StyledItemList","styled","div","t","props","$gridTemplateColumns","theme","color","neutral","typography","white","primary","blue400","$isDisabled","css","blue100","blue200","$isClickable","black60","$shouldHaveGapBetweenText","blue600","fontSize5","boldFontWeight","regularFontWeight","gray","gray400","KitItemList","title","description","picture","onSelectChange","tagNumber","onRafterClick","isDisabled","onClick","descriptionVisible","setDescriptionVisible","useState","isDescriptionEllipsis","setIsDescriptionEllipsis","hasTitle","hasDescription","hasPicture","hasTag","isClickable","isSelectable","hasRafter","React","createElement","e","stopPropagation","gridTemplateColumns","KitCheckbox","disabled","onChange","pictureJsx","type","let","noBorder","cloneProps","wrapperClassName","displayName","preview","mask","EyeOutlined","width","height","rootClassName","on","Component","cloneElement","className","KitTypography","Text","size","weight","ellipsis","rows","tooltip","Paragraph","expandable","onEllipsis","Link","KitTag","RightOutlined"],"mappings":"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"}