import React, { FunctionComponent } from 'react';
import type { IKitAutoComplete } from './types';
export declare const StyledKitAutoComplete: import("styled-components").IStyledComponent<"web", {
    dataSource?: import("antd/es/auto-complete").DataSourceItemType[] | undefined;
    status?: "" | "error" | "warning" | undefined;
    popupClassName?: string | undefined;
    dropdownClassName?: string | undefined;
    dropdownMatchSelectWidth?: number | boolean | undefined;
    popupMatchSelectWidth?: number | boolean | undefined;
    style?: React.CSSProperties | undefined;
    title?: string | undefined;
    id?: string | undefined;
    className?: string | undefined;
    clearIcon?: import("rc-select/lib/interface").RenderNode;
    disabled?: boolean | undefined;
    children?: React.ReactNode;
    value?: unknown;
    placeholder?: React.ReactNode;
    onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
    onChange?: ((value: unknown, option: import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType | (import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType)[]) => void) | undefined;
    onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
    onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
    defaultValue?: unknown;
    onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
    onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
    onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
    onFocus?: React.FocusEventHandler<HTMLElement> | undefined;
    onSelect?: import("rc-select/lib/Select").SelectHandler<unknown, import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType> | undefined;
    onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
    autoFocus?: boolean | undefined;
    tabIndex?: number | undefined;
    "aria-activedescendant"?: string | undefined;
    "aria-atomic"?: (boolean | "false" | "true") | undefined;
    "aria-autocomplete"?: "none" | "inline" | "list" | "both" | undefined;
    "aria-braillelabel"?: string | undefined;
    "aria-brailleroledescription"?: string | undefined;
    "aria-busy"?: (boolean | "false" | "true") | undefined;
    "aria-checked"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-colcount"?: number | undefined;
    "aria-colindex"?: number | undefined;
    "aria-colindextext"?: string | undefined;
    "aria-colspan"?: number | undefined;
    "aria-controls"?: string | undefined;
    "aria-current"?: boolean | "time" | "step" | "page" | "false" | "true" | "location" | "date" | undefined;
    "aria-describedby"?: string | undefined;
    "aria-description"?: string | undefined;
    "aria-details"?: string | undefined;
    "aria-disabled"?: (boolean | "false" | "true") | undefined;
    "aria-dropeffect"?: "none" | "link" | "copy" | "move" | "execute" | "popup" | undefined;
    "aria-errormessage"?: string | undefined;
    "aria-expanded"?: (boolean | "false" | "true") | undefined;
    "aria-flowto"?: string | undefined;
    "aria-grabbed"?: (boolean | "false" | "true") | undefined;
    "aria-haspopup"?: boolean | "grid" | "dialog" | "menu" | "listbox" | "false" | "true" | "tree" | undefined;
    "aria-hidden"?: (boolean | "false" | "true") | undefined;
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    "aria-keyshortcuts"?: string | undefined;
    "aria-label"?: string | undefined;
    "aria-labelledby"?: string | undefined;
    "aria-level"?: number | undefined;
    "aria-live"?: "off" | "assertive" | "polite" | undefined;
    "aria-modal"?: (boolean | "false" | "true") | undefined;
    "aria-multiline"?: (boolean | "false" | "true") | undefined;
    "aria-multiselectable"?: (boolean | "false" | "true") | undefined;
    "aria-orientation"?: "horizontal" | "vertical" | undefined;
    "aria-owns"?: string | undefined;
    "aria-placeholder"?: string | undefined;
    "aria-posinset"?: number | undefined;
    "aria-pressed"?: boolean | "mixed" | "false" | "true" | undefined;
    "aria-readonly"?: (boolean | "false" | "true") | undefined;
    "aria-relevant"?: "text" | "all" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
    "aria-required"?: (boolean | "false" | "true") | undefined;
    "aria-roledescription"?: string | undefined;
    "aria-rowcount"?: number | undefined;
    "aria-rowindex"?: number | undefined;
    "aria-rowindextext"?: string | undefined;
    "aria-rowspan"?: number | undefined;
    "aria-selected"?: (boolean | "false" | "true") | undefined;
    "aria-setsize"?: number | undefined;
    "aria-sort"?: "none" | "ascending" | "descending" | "other" | undefined;
    "aria-valuemax"?: number | undefined;
    "aria-valuemin"?: number | undefined;
    "aria-valuenow"?: number | undefined;
    "aria-valuetext"?: string | undefined;
    maxLength?: number | undefined;
    open?: boolean | undefined;
    size?: import("antd/es/button").ButtonSize;
    direction?: "ltr" | "rtl" | undefined;
    animation?: string | undefined;
    placement?: import("rc-select/lib/interface").Placement | undefined;
    getInputElement?: (() => JSX.Element) | undefined;
    getRawInputElement?: (() => JSX.Element) | undefined;
    backfill?: boolean | undefined;
    prefixCls?: string | undefined;
    searchValue?: string | undefined;
    autoClearSearchValue?: boolean | undefined;
    onSearch?: ((value: string) => void) | undefined;
    showSearch?: boolean | undefined;
    tagRender?: ((props: import("rc-select/lib/BaseSelect").CustomTagProps) => React.ReactElement<any, string | React.JSXElementConstructor<any>>) | undefined;
    notFoundContent?: React.ReactNode;
    onClear?: (() => void) | undefined;
    choiceTransitionName?: string | undefined;
    defaultOpen?: boolean | undefined;
    onDropdownVisibleChange?: ((open: boolean) => void) | undefined;
    maxTagTextLength?: number | undefined;
    maxTagCount?: number | "responsive" | undefined;
    maxTagPlaceholder?: React.ReactNode | ((omittedValues: import("rc-select/lib/interface").DisplayValueType[]) => React.ReactNode);
    tokenSeparators?: string[] | undefined;
    allowClear?: boolean | {
        clearIcon?: import("rc-select/lib/interface").RenderNode;
    } | undefined;
    suffixIcon?: React.ReactNode;
    removeIcon?: import("rc-select/lib/interface").RenderNode;
    transitionName?: string | undefined;
    dropdownStyle?: React.CSSProperties | undefined;
    dropdownRender?: ((menu: React.ReactElement<any, string | React.JSXElementConstructor<any>>) => React.ReactElement<any, string | React.JSXElementConstructor<any>>) | undefined;
    dropdownAlign?: import("@rc-component/trigger").AlignType | undefined;
    builtinPlacements?: import("@rc-component/trigger").BuildInPlacements | undefined;
    getPopupContainer?: import("rc-select/lib/interface").RenderDOMFunc | undefined;
    showAction?: ("focus" | "click")[] | undefined;
    onPopupScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
    onInputKeyDown?: React.KeyboardEventHandler<HTMLInputElement | HTMLTextAreaElement> | undefined;
    fieldNames?: import("rc-select/lib/Select").FieldNames | undefined;
    inputValue?: string | undefined;
    onDeselect?: import("rc-select/lib/Select").SelectHandler<unknown, import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType> | undefined;
    filterOption?: boolean | import("rc-select/lib/Select").FilterFunc<import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType> | undefined;
    filterSort?: ((optionA: import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType, optionB: import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType) => number) | undefined;
    optionFilterProp?: string | undefined;
    options?: (import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType)[] | undefined;
    defaultActiveFirstOption?: boolean | undefined;
    virtual?: boolean | undefined;
    listHeight?: number | undefined;
    listItemHeight?: number | undefined;
    menuItemSelectedIcon?: import("rc-select/lib/interface").RenderNode;
    rootClassName?: string | undefined;
    bordered?: boolean | undefined;
    showArrow?: boolean | undefined;
    ref?: React.Ref<import("antd").RefSelectProps> | undefined;
}> & (<ValueType = any, OptionType extends import("rc-select/lib/Select").DefaultOptionType | import("rc-select/lib/Select").BaseOptionType = import("rc-select/lib/Select").DefaultOptionType>(props: import("antd").AutoCompleteProps<ValueType, OptionType> & {
    children?: React.ReactNode;
} & {
    ref?: React.Ref<import("antd").RefSelectProps> | undefined;
}) => React.ReactElement<any, string | React.JSXElementConstructor<any>>) & {
    displayName?: string | undefined;
    Option: import("rc-select/lib/Option").OptionFC;
    _InternalPanelDoNotUseOrYouWillBeFired: (props: any) => React.JSX.Element;
};
export declare const KitAutoComplete: FunctionComponent<IKitAutoComplete>;
