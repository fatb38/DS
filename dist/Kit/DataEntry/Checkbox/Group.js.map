{"version":3,"file":"Group.js","sources":["../../../../src/Kit/DataEntry/Checkbox/Group.tsx"],"sourcesContent":["import classNames from 'classnames';\nimport omit from 'rc-util/lib/omit';\nimport * as React from 'react';\nimport {ConfigContext} from 'antd/lib/config-provider/';\nimport type {CheckboxChangeEvent} from 'antd/lib/checkbox/Checkbox';\nimport Checkbox from './Checkbox';\nimport {GroupContext} from 'antd/es/checkbox/Group';\n\nimport useStyle from 'antd/lib/checkbox/style';\n\nexport type CheckboxValueType = string | number | boolean;\n\nexport interface CheckboxOptionType {\n    label: React.ReactNode;\n    value: CheckboxValueType;\n    style?: React.CSSProperties;\n    disabled?: boolean;\n    danger?: boolean;\n    onChange?: (e: CheckboxChangeEvent) => void;\n}\n\nexport interface AbstractCheckboxGroupProps {\n    prefixCls?: string;\n    className?: string;\n    rootClassName?: string;\n    options?: Array<CheckboxOptionType | string | number>;\n    disabled?: boolean;\n    danger?: boolean;\n    style?: React.CSSProperties;\n}\n\nexport interface CheckboxGroupProps extends AbstractCheckboxGroupProps {\n    name?: string;\n    defaultValue?: Array<CheckboxValueType>;\n    value?: Array<CheckboxValueType>;\n    onChange?: (checkedValue: Array<CheckboxValueType>) => void;\n    children?: React.ReactNode;\n}\n\nexport const InternalCheckboxGroup: React.ForwardRefRenderFunction<HTMLDivElement, CheckboxGroupProps> = (\n    {\n        defaultValue,\n        children,\n        options = [],\n        prefixCls: customizePrefixCls,\n        className,\n        rootClassName,\n        style,\n        onChange,\n        ...restProps\n    },\n    ref\n) => {\n    const {getPrefixCls, direction} = React.useContext(ConfigContext);\n\n    const [value, setValue] = React.useState<CheckboxValueType[]>(restProps.value || defaultValue || []);\n    const [registeredValues, setRegisteredValues] = React.useState<CheckboxValueType[]>([]);\n\n    React.useEffect(() => {\n        if ('value' in restProps) {\n            setValue(restProps.value || []);\n        }\n    }, [restProps]);\n\n    const getOptions = () =>\n        options.map(option => {\n            if (typeof option === 'string' || typeof option === 'number') {\n                return {\n                    label: option,\n                    value: option\n                };\n            }\n            return option;\n        });\n\n    const cancelValue = (val: string) => {\n        setRegisteredValues(prevValues => prevValues.filter(v => v !== val));\n    };\n\n    const registerValue = (val: string) => {\n        setRegisteredValues(prevValues => [...prevValues, val]);\n    };\n\n    const toggleOption = (option: CheckboxOptionType) => {\n        const optionIndex = value.indexOf(option.value);\n        const newValue = [...value];\n        if (optionIndex === -1) {\n            newValue.push(option.value);\n        } else {\n            newValue.splice(optionIndex, 1);\n        }\n        if (!('value' in restProps)) {\n            setValue(newValue);\n        }\n        const opts = getOptions();\n        onChange?.(\n            newValue\n                .filter(val => registeredValues.includes(val))\n                .sort((a, b) => {\n                    const indexA = opts.findIndex(opt => opt.value === a);\n                    const indexB = opts.findIndex(opt => opt.value === b);\n                    return indexA - indexB;\n                })\n        );\n    };\n\n    const prefixCls = getPrefixCls('checkbox', customizePrefixCls);\n    const groupPrefixCls = `${prefixCls}-group`;\n\n    const [wrapSSR, hashId] = useStyle(prefixCls);\n\n    const domProps = omit(restProps, ['value', 'disabled']);\n\n    if (options && options.length > 0) {\n        children = getOptions().map(option => (\n            <Checkbox\n                prefixCls={prefixCls}\n                key={option.value.toString()}\n                danger={'danger' in option ? option.danger : restProps.danger}\n                disabled={'disabled' in option ? option.disabled : restProps.disabled}\n                value={option.value}\n                checked={value.includes(option.value)}\n                onChange={option.onChange}\n                className={`${groupPrefixCls}-item`}\n                style={option.style}\n            >\n                {option.label}\n            </Checkbox>\n        ));\n    }\n\n    // eslint-disable-next-line react/jsx-no-constructed-context-values\n    const context = {\n        toggleOption,\n        value,\n        disabled: restProps.disabled,\n        name: restProps.name,\n        // https://github.com/ant-design/ant-design/issues/16376\n        registerValue,\n        cancelValue\n    };\n    const classString = classNames(\n        groupPrefixCls,\n        {\n            [`${groupPrefixCls}-rtl`]: direction === 'rtl'\n        },\n        className,\n        rootClassName,\n        hashId\n    );\n    return wrapSSR(\n        <div className={classString} style={style} {...domProps} ref={ref}>\n            <GroupContext.Provider value={context}>{children}</GroupContext.Provider>\n        </div>\n    );\n};\n\nconst CheckboxGroup = React.forwardRef<HTMLDivElement, CheckboxGroupProps>(InternalCheckboxGroup);\n\nexport default React.memo(CheckboxGroup);\n"],"names":["InternalCheckboxGroup","defaultValue","children","options","prefixCls","customizePrefixCls","className","rootClassName","style","onChange","restProps","ref","getPrefixCls","direction","React","useContext","ConfigContext","value","setValue","useState","registeredValues","setRegisteredValues","getOptions","useEffect","map","option","label","groupPrefixCls","wrapSSR","hashId","useStyle","domProps","omit","context","length","createElement","Checkbox","key","toString","danger","disabled","checked","includes","toggleOption","optionIndex","indexOf","newValue","push","splice","opts","filter","e","val","sort","a","b","findIndex","opt","name","registerValue","t","prevValues","cancelValue","v","classString","classNames","GroupContext","Provider","CheckboxGroup","forwardRef","Group","memo"],"mappings":"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"}