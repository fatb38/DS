{"version":3,"file":"TagInput.js","sources":["../../../../src/Kit/DataEntry/Tag/TagInput.tsx"],"sourcesContent":["import styled from 'styled-components';\nimport React, {useState, useEffect} from 'react';\nimport {Select} from 'antd';\nimport type {CustomTagProps} from 'rc-select/lib/BaseSelect';\nimport {KitSelectStyle, StyledLabel} from '@kit/DataEntry/Select/style';\nimport {CheckOutlined, CloseOutlined} from '@ant-design/icons';\nimport {KitIcon} from '../../General/';\nimport Tag from './Tag';\nimport {tagTheme} from './theme';\nimport theme from '@theme/index';\nimport {KitTagInputProps} from './types';\n\nconst tagRender = (props: CustomTagProps) => {\n    const {label, onClose} = props;\n    return (\n        <Tag closable onClose={onClose}>\n            {label}\n        </Tag>\n    );\n};\n\nconst fixedProps = {\n    mode: 'tags',\n    tagRender: tagRender\n};\n\nconst DropDownRenderer = menu => <div className=\"ari-select-dropdown-content\">{menu}</div>;\n\nconst TagInputBase = styled(Select)`\n    ${KitSelectStyle}\n    & .ant-select-selector {\n        padding: 8px 25px 8px 10px;\n    }\n\n    & .ant-select-clear {\n        opacity: 1;\n        font-size: 10px;\n        top: calc(50% + 3px);\n        color: ${theme.color.neutral.typography.black};\n    }\n\n    & .ant-select-selection-placeholder {\n        color: ${tagTheme.placeholderColor};\n        font-size: ${tagTheme.placeholderFontSize};\n        font-weight: ${tagTheme.placeholderFontWeight};\n    }\n`;\n\nconst KitTagInput = ({onChange, ...props}: KitTagInputProps) => {\n    const [selectedItems, setSelectedItems] = useState<string[]>(props.value || []);\n    const [filteredOptions, setFiltereOptions] = useState<string[]>([]);\n\n    useEffect(() => {\n        // Todo dedoublonner les items\n        const filtered: string[] = (props.options || []).filter(v => !selectedItems.indexOf(v));\n        setFiltereOptions([...filtered, ...selectedItems]);\n    }, [props.options, selectedItems]);\n\n    const onInternalChange = values => {\n        setSelectedItems(values);\n        onChange && onChange(values);\n    };\n    // @ts-ignore\n    let SelectionIcon = <KitIcon icon={<CheckOutlined />} on />;\n\n    let inputProps: any = {\n        ...props,\n        showArrow: false,\n        allowClear: true,\n        clearIcon: <CloseOutlined />,\n        popupMatchSelectWidth: false,\n        defaultActiveFirstOption: false,\n        tokenSeparators: props.tokenSeparator || [','],\n        menuItemSelectedIcon: SelectionIcon,\n        onChange: onInternalChange,\n        style: {minWidth: '100px'},\n        dropdownRender: DropDownRenderer,\n        popupClassName:\n            'ari-select-dropdown-' + (props.placement && props.placement.indexOf('top') >= 0 ? 'top' : 'bottom'),\n        className:\n            (props.className || '') +\n            ' ant-select-' +\n            (props.placement && props.placement.indexOf('top') >= 0 ? 'top' : 'bottom')\n    };\n\n    if (props.onSearch) {\n        inputProps = {\n            ...inputProps,\n            showSearch: true,\n            filterOption: false,\n            notFoundContent: props.notFoundContent || null\n        };\n    }\n\n    return (\n        <TagInputBase\n            {...inputProps}\n            {...fixedProps}\n            value={selectedItems}\n            options={filteredOptions.map(item => ({\n                value: item,\n                label: <StyledLabel>{item}</StyledLabel>\n            }))}\n        />\n    );\n};\n\nexport default KitTagInput;\n"],"names":["tagRender","label","onClose","props","React","createElement","Tag","closable","fixedProps","mode","DropDownRenderer","e","className","menu","TagInputBase","styled","Select","KitSelectStyle","theme","color","neutral","typography","black","tagTheme","placeholderColor","placeholderFontSize","placeholderFontWeight","KitTagInput","onChange","selectedItems","setSelectedItems","useState","value","filteredOptions","setFiltereOptions","useEffect","filtered","options","filter","indexOf","v","SelectionIcon","KitIcon","icon","CheckOutlined","on","let","inputProps","showArrow","allowClear","clearIcon","CloseOutlined","popupMatchSelectWidth","defaultActiveFirstOption","tokenSeparators","tokenSeparator","menuItemSelectedIcon","values","style","minWidth","dropdownRender","popupClassName","placement","onSearch","showSearch","filterOption","notFoundContent","map","item","StyledLabel"],"mappings":";;;;;;;;;;;AAYA,MAAMA,IAAY,OAAA;AACR,MAAA,EAACC,OAAAA,GAAOC,SAAAA,EAAW,IAAAC;AACzB,SACKC,EAAAC,cAAAC,GAAA,EAAIC,UAAQ,IAACL,SAAAA,KACTD,CACL;AAER,GAEMO,IAAa,EACfC,MAAM,QACNT,WAAAA,EACJ,GAEMU,IAAmB,CAAAC,MAAQP,EAAAC,cAAC,OAAI,EAAAO,WAAU,iCAA+BC,CAAK,GAE9EC,IAAeC,EAAOC,CAAM;AAAA,MAC5BC,CAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA;AAAAA,iBASWC,EAAMC,MAAMC,QAAQC,WAAWC,KAAAA;AAAAA;AAAAA;AAAAA;AAAAA,iBAI/BC,EAASC,gBAAAA;AAAAA,qBACLD,EAASE,mBAAAA;AAAAA,uBACPF,EAASG,qBAAAA;AAAAA;AAAAA,GAI1BC,IAAc,CAAA,EAAEC,UAAAA,GAAAA,GAAazB,EAA6B,MACtD;AAAA,QAAA,CAAC0B,GAAeC,CAAAA,IAAoBC,EAAmB5B,EAAM6B,SAAS,EAAE,GACxE,CAACC,GAAiBC,CAAqBH,IAAAA,EAAmB,EAAE;AAElEI,EAAAA,EAAU;AAEA,QAAAC,KAAsBjC,EAAMkC,WAAW,CAAA,GAAIC,OAAO,CAAA3B,MAAK,CAACkB,EAAcU,QAAQC,CAAC,CAAC;AACtFN,IAAAA,EAAkB,CAAC,GAAGE,GAAU,GAAGP,CAAc,CAAA;AAAA,EAClD,GAAA,CAAC1B,EAAMkC,SAASR,CAAc,CAAA;AAEjC,MAKIY,oBAAiBC,GAAQ,EAAAC,sBAAOC,GAAc,IAAA,GAAIC,IAAE,GAAC,CAAA;AAEzDC,MAAIC,IAAkB,EAClB,GAAG5C,GACH6C,WAAW,IACXC,YAAY,IACZC,2BAAYC,GAAc,IAAA,GAC1BC,uBAAuB,IACvBC,0BAA0B,IAC1BC,iBAAiBnD,EAAMoD,kBAAkB,CAAC,GAAA,GAC1CC,sBAAsBf,GACtBb,UAhBqB,CAAAjB;AACrBmB,IAAAA,EAAiB2B,CAAM,GACvB7B,KAAYA,EAAS6B,CAAM;AAAA,EAAA,GAe3BC,OAAO,EAACC,UAAU,QAAO,GACzBC,gBAAgBlD,GAChBmD,gBACI,0BAA0B1D,EAAM2D,aAA+C,KAAlC3D,EAAM2D,UAAUvB,QAAQ,KAAK,IAAS,QAAQ,WAC/F3B,YACKT,EAAMS,aAAa,MACpB,kBACCT,EAAM2D,aAA+C,KAAlC3D,EAAM2D,UAAUvB,QAAQ,KAAK,IAAS,QAAQ,UAAA;AAatE,SAVApC,EAAM4D,aACOhB,IAAA,EACT,GAAGA,GACHiB,YAAY,IACZC,cAAc,IACdC,iBAAiB/D,EAAM+D,mBAAmB,KAAA,IAK9C9D,EAAAC,cAACS,GAAA,EACI,GAAGiC,GACH,GAAGvC,GACJwB,OAAOH,GACPQ,SAASJ,EAAgBkC,IAAI,CAAAxD,OAAS,EAClCqB,OAAOoC,GACPnE,OAAQG,EAAAC,cAAAgE,GAAA,MAAaD,CAAK,EAC5B,EAAA,EAAA,CAAA;AAGd;"}