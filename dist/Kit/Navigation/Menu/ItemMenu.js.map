{"version":3,"file":"ItemMenu.js","sources":["../../../../src/Kit/Navigation/Menu/ItemMenu.tsx"],"sourcesContent":["import React from 'react';\nimport {KitItemMenuProps, KitItemMenuType} from './types';\nimport {css, styled} from 'styled-components';\nimport theme from '@theme/index';\nimport {KitCheckbox} from '@kit/DataEntry/';\nimport {KitTypography, KitIcon} from '@kit/General/';\nimport {RightOutlined, MoreOutlined} from '@ant-design/icons';\nimport {KitTooltip} from '@kit/DataDisplay/';\nimport {KitDropDown} from '../DropDown';\nimport {MenuItemType} from 'antd/es/menu/hooks/useItems';\n\nconst StyledIemMenu = styled.div<{\n    $isClickable: boolean;\n    $isSelected: boolean;\n    $type: KitItemMenuType;\n}>`\n    height: 32px;\n    display: grid;\n    grid-template: 'select icon title actions value rafter';\n    grid-template-columns: min-content min-content minmax(0px, auto) min-content min-content min-content;\n    padding: 4px 8px 4px 0px;\n    background-color: ${theme.color.neutral.typography.white};\n    align-items: center;\n\n    ${props =>\n        props.$isClickable &&\n        css`\n            cursor: pointer;\n        `}\n\n    ${props =>\n        props.$isSelected &&\n        css`\n            background-color: ${theme.color.primary.blue100};\n            border-right: 3px solid ${theme.color.primary.blue400};\n            padding-inline-end: 5px;\n\n            .kit-item-menu-title span,\n            .kit-item-menu-icon span {\n                color: ${theme.color.primary.blue400};\n            }\n        `}\n\n    &:hover {\n        background-color: ${theme.color.primary.blue100};\n    }\n\n    .kit-item-menu-checkbox {\n        grid-area: select;\n        margin-left: 8px;\n        margin-right: 8px;\n    }\n\n    .kit-item-menu-icon {\n        grid-area: icon;\n\n        span {\n            color: ${theme.color.secondary.mediumGrey.mediumGrey300};\n        }\n    }\n\n    .kit-item-menu-title {\n        grid-area: title;\n        margin-left: 8px;\n    }\n\n    .kit-item-menu-actions {\n        grid-area: actions;\n        display: grid;\n        grid-template-columns: inherit;\n        margin-left: 8px;\n        align-items: center;\n\n        .kit-action-more {\n            cursor: pointer;\n            transform: rotate(90deg);\n        }\n    }\n\n    ${props => {\n        switch (props.$type) {\n            case 'cta':\n                return css`\n                    .kit-item-menu-title span,\n                    .kit-item-menu-icon span {\n                        color: ${theme.color.primary.blue400};\n                    }\n                `;\n            case 'ctaDanger':\n                return css`\n                    .kit-item-menu-title span,\n                    .kit-item-menu-icon span {\n                        color: ${theme.color.secondary.red.red400};\n                    }\n\n                    &:hover {\n                        background-color: ${theme.color.secondary.red.red100};\n                    }\n                `;\n            case 'default':\n                return;\n        }\n    }}\n\n    .kit-item-menu-value {\n        grid-area: value;\n        margin-left: 8px;\n\n        span {\n            color: ${theme.color.secondary.mediumGrey.mediumGrey300};\n        }\n    }\n\n    .kit-item-menu-rafter {\n        grid-area: rafter;\n        color: ${theme.color.secondary.mediumGrey.mediumGrey300};\n        font-size: 12px;\n        margin-left: 8px;\n\n        &:hover {\n            color: ${theme.color.primary.blue400};\n            cursor: pointer;\n        }\n    }\n`;\n\nconst KitItemMenu: React.FunctionComponent<KitItemMenuProps> = ({\n    type = 'default',\n    title,\n    icon,\n    value,\n    actions,\n    onSelectChange,\n    onRafterClick,\n    isSelected = false,\n    onClick,\n    ...props\n}) => {\n    const isClickable = onClick !== undefined;\n    const isSelectable = onSelectChange !== undefined;\n    const hasRafter = onRafterClick !== undefined;\n\n    const getCheckbox = () => {\n        return (\n            isSelectable && (\n                <div className=\"kit-item-menu-checkbox\">\n                    <KitCheckbox\n                        onClick={e => e.stopPropagation()}\n                        onChange={e => {\n                            onSelectChange && onSelectChange(e);\n                        }}\n                    />\n                </div>\n            )\n        );\n    };\n\n    const getIcon = () => {\n        return (\n            icon && (\n                <div className=\"kit-item-menu-icon\">\n                    <KitIcon icon={icon} on={isSelected} />\n                </div>\n            )\n        );\n    };\n\n    const getTitle = () => {\n        return (\n            title && (\n                <div className=\"kit-item-menu-title\">\n                    <KitTypography.Text size=\"large\" weight=\"medium\" ellipsis={{rows: 1, tooltip: true}}>\n                        {title}\n                    </KitTypography.Text>\n                </div>\n            )\n        );\n    };\n\n    const getActions = () => {\n        if (actions) {\n            const firstAction = actions[0] ? actions[0] : null;\n            const secondAction = actions.length <= 2 && actions[1] ? actions[1] : null;\n\n            return (\n                actions?.length && (\n                    <div className=\"kit-item-menu-actions\">\n                        {firstAction && (\n                            <KitTooltip title={firstAction.label}>\n                                <KitIcon\n                                    icon={firstAction.icon}\n                                    hoverable\n                                    onClick={(e: MouseEvent) => {\n                                        e.stopPropagation();\n                                        firstAction.onClick();\n                                    }}\n                                />\n                            </KitTooltip>\n                        )}\n                        {secondAction && (\n                            <KitTooltip title={secondAction.label}>\n                                <KitIcon\n                                    icon={secondAction.icon}\n                                    hoverable\n                                    onClick={(e: MouseEvent) => {\n                                        e.stopPropagation();\n                                        secondAction.onClick();\n                                    }}\n                                />\n                            </KitTooltip>\n                        )}\n                        {actions.length > 2 && (\n                            <div\n                                onClick={e => {\n                                    e.stopPropagation();\n                                }}\n                            >\n                                <KitDropDown\n                                    menu={{\n                                        items: getMoreActionsDropDownItems()\n                                    }}\n                                >\n                                    <KitTooltip title=\"More\">\n                                        <KitIcon className=\"kit-action-more\" icon={<MoreOutlined />} hoverable />\n                                    </KitTooltip>\n                                </KitDropDown>\n                            </div>\n                        )}\n                    </div>\n                )\n            );\n        }\n    };\n\n    const getMoreActionsDropDownItems = (): MenuItemType[] | undefined => {\n        if (actions === undefined || actions.length === 0) {\n            return undefined;\n        }\n\n        const newActions = [...actions];\n\n        // Remove first action because we don't want it to be duplicated\n        newActions.splice(0, 1);\n\n        const dropDownActions = newActions.map((item, index) => {\n            return {\n                key: index,\n                icon: item.icon,\n                label: item.label,\n                onClick: item.onClick\n            };\n        });\n\n        return dropDownActions;\n    };\n\n    const getValue = () => {\n        return (\n            value && (\n                <div className=\"kit-item-menu-value\">\n                    <KitTypography.Text size=\"large\" weight=\"regular\" ellipsis={{rows: 1, tooltip: true}}>\n                        {value}\n                    </KitTypography.Text>\n                </div>\n            )\n        );\n    };\n\n    const getRafter = () => {\n        return (\n            hasRafter && (\n                <div\n                    className=\"kit-item-menu-rafter\"\n                    onClick={e => {\n                        e.stopPropagation();\n                        onRafterClick && onRafterClick();\n                    }}\n                >\n                    <RightOutlined rev=\"\" />\n                </div>\n            )\n        );\n    };\n\n    return (\n        <StyledIemMenu\n            $isClickable={isClickable}\n            $isSelected={isSelected}\n            $type={type}\n            onClick={e => {\n                e.stopPropagation();\n                onClick && onClick();\n            }}\n            {...props}\n        >\n            {getCheckbox()}\n            {getIcon()}\n            {getTitle()}\n            {getActions()}\n            {getValue()}\n            {getRafter()}\n        </StyledIemMenu>\n    );\n};\n\nexport default KitItemMenu;\n"],"names":["StyledIemMenu","styled","div","theme","color","neutral","typography","white","e","props","$isClickable","css","$isSelected","primary","blue100","blue400","secondary","mediumGrey","mediumGrey300","$type","red","red400","red100","KitItemMenu","type","title","icon","value","actions","onSelectChange","onRafterClick","isSelected","onClick","isClickable","isSelectable","hasRafter","React","createElement","stopPropagation","className","KitCheckbox","onChange","KitIcon","on","KitTypography","Text","size","weight","ellipsis","rows","tooltip","firstAction","secondAction","length","KitTooltip","label","hoverable","KitDropDown","menu","items","newActions","dropDownActions","splice","map","item","index","key","MoreOutlined","RightOutlined","rev"],"mappings":"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"}