@use 'sass:map';
@import '../../../css/mixins.scss';

$sizes: (
    'xs': 7,
    's': 6,
    'm': 5,
    'l': 4,
    'xl': 3
);
$prefix: 'kit-btn-';

@mixin defaultTokens($category, $name, $colorKey, $color) {
    &.kit-btn-#{$name} {
        --kit-btn-main-color: var(--general-colors-#{$category}-#{$colorKey}-400);
        --kit-btn-main-light: var(--general-colors-#{$category}-#{$colorKey}-100);
        --kit-btn-main-focus: var(--general-colors-#{$category}-#{$colorKey}-200);
        --kit-btn-main-dark: var(--general-colors-#{$category}-#{$colorKey}-500);
        --kit-btn-main-dark-deep: var(--general-colors-#{$category}-#{$colorKey}-600);
        --kit-btn-invert-color: var(--general-utilities-light);
    }
}

@mixin colorTokens($name, $color, $path) {
    $defaultValues: map.get($defaultColorValues, $color);
    &.#{$name} {
        --kit-btn-color-default: var(
            --components-Button-#{$path}-typography-default,
            #{map.get($defaultValues, 'color-default')}
        );
        --kit-btn-color-hover: var(
            --components-Button-#{$path}-typography-hover,
            #{map.get($defaultValues, 'color-hover')}
        );
        --kit-btn-color-focus: var(
            --components-Button-#{$path}-typography-focus,
            #{map.get($defaultValues, 'color-focus')}
        );
        --kit-btn-color-active: var(
            --components-Button-#{$path}-typography-active,
            #{map.get($defaultValues, 'color-active')}
        );
        --kit-btn-color-disabled: var(
            --components-Button-#{$path}-typography-disabled,
            #{map.get($defaultValues, 'color-disabled')}
        );
        --kit-btn-color-ghost: var(
            --components-Button-#{$path}-typography-disabled,
            #{map.get($defaultValues, 'color-ghost')}
        );
        --kit-btn-color-background-default: var(
            --components-Button-#{$path}-background-default,
            #{map.get($defaultValues, 'color-background-default')}
        );
        --kit-btn-color-background-hover: var(
            --components-Button-#{$path}-background-hover,
            #{map.get($defaultValues, 'color-background-hover')}
        );
        --kit-btn-color-background-focus: var(
            --components-Button-#{$path}-background-focus,
            #{map.get($defaultValues, 'color-background-focus')}
        );
        --kit-btn-color-background-active: var(
            --components-Button-#{$path}-background-active,
            #{map.get($defaultValues, 'color-background-active')}
        );
        --kit-btn-color-background-disabled: var(
            --components-Button-#{$path}-background-disabled,
            #{map.get($defaultValues, 'color-background-disabled')}
        );
        --kit-btn-color-background-ghost: var(
            --components-Button-#{$path}-background-disabled,
            #{map.get($defaultValues, 'color-background-ghost')}
        );
        --kit-btn-color-border-default: var(
            --components-Button-#{$path}-border-default,
            #{map.get($defaultValues, 'color-border-default')}
        );
        --kit-btn-color-border-hover: var(
            --components-Button-#{$path}-border-hover,
            #{map.get($defaultValues, 'color-border-hover')}
        );
        --kit-btn-color-border-focus: var(
            --components-Button-#{$path}-border-focus,
            #{map.get($defaultValues, 'color-border-focus')}
        );
        --kit-btn-color-border-active: var(
            --components-Button-#{$path}-border-active,
            #{map.get($defaultValues, 'color-border-active')}
        );
        --kit-btn-color-border-disabled: var(
            --components-Button-#{$path}-border-disabled,
            #{map.get($defaultValues, 'color-border-disabled')}
        );
        --kit-btn-color-border-ghost: var(
            --components-Button-#{$path}-border-disabled,
            #{map.get($defaultValues, 'color-border-ghost')}
        );
    }
}

:local(.kit-btn) {
    height: 40px;
    min-width: 40px;
    position: relative;
    padding: convertToPixel(--general-spacing-none) convertToPixel(--components-Button-padding, --general-spacing-s);
    display: inline-flex;
    align-items: center;
    gap: 8px;
    box-shadow: none;
    font-family: var(--components-Button-typography-fontFamily, var(--general-typography-fontFamily));
    font-weight: var(--components-Button-typography-fontWeight, var(--general-typography-regularFontWeight));
    font-size: convertToPixel(--components-Button-typography-fontSize, --general-typography-fontSize5);
    line-height: var(--components-Button-typography-lineHeight, var(--general-typography-lineHeight5));
    border-radius: convertToPixel(--components-Button-border-radius-default, --general-border-radius-pills);
    cursor: pointer;

    @each $size, $default in $sizes {
        &.icon-#{$size} .kit-btn-icon {
            font-size: convertToPixel(
                --components-Button-typography-iconSize-#{$size},
                --general-typography-fontSize#{$default}
            );
        }
    }

    --kit-btn-main-color: var(--general-utilities-main-default);
    --kit-btn-main-light: var(--general-utilities-main-light);
    --kit-btn-main-focus: var(--general-utilities-focus);
    --kit-btn-main-dark: var(--general-utilities-main-dark);
    --kit-btn-main-dark-deep: var(--general-utilities-main-deepDark);
    --kit-btn-invert-color: var(--general-utilities-light);
    --kit-btn-disabled-color: var(--general-utilities-disabled);
    --kit-btn-border-color: var(--general-utilities-border);
    --kit-btn-grey-light: var(--general-utilities-neutral-light);

    &.kit-btn-block {
        display: flex;
        width: 100%;
        justify-content: center;
    }

    &:focus-visible,
    &.kit-btn-secondary:focus {
        outline: var(--general-utilities-focus) solid 3px;
        transition:
            outline-offset 0s ease 0s,
            outline 0s ease 0s;
        border-color: transparent;
    }

    &,
    &.kit-btn-secondary {
        color: var(--kit-btn-main-color);
        background-color: var(--kit-btn-invert-color);
        border: 1px solid var(--kit-btn-border-color);

        &:hover {
            border-color: var(--kit-btn-main-color);
        }

        &:active {
            border-color: var(--kit-btn-main-color);
            background-color: var(--kit-btn-main-light);
        }

        &:disabled {
            color: var(--kit-btn-disabled-color);
            background-color: var(--kit-btn-grey-light);
            border-color: var(--kit-btn-border-color);
            cursor: not-allowed;
        }
    }

    &.kit-btn-primary {
        background-color: var(--kit-btn-main-color);
        border-color: var(--kit-btn-main-color);
        color: var(--kit-btn-invert-color);

        &:hover {
            background-color: var(--kit-btn-main-dark);
            border-color: var(--kit-btn-main-dark);
        }

        &:active {
            background-color: var(--kit-btn-main-dark-deep);
            border-color: var(--kit-btn-main-dark-deep);
        }

        &:disabled {
            color: var(--kit-btn-disabled-color);
            background-color: var(--kit-btn-grey-light);
            border-color: var(--kit-btn-border-color);
        }
    }

    &.kit-btn-tertiary {
        background-color: transparent;
        border-color: transparent;
        color: var(--kit-btn-main-color);

        &:hover {
            background-color: var(--kit-btn-grey-light);
            border-color: var(--kit-btn-grey-light);
        }

        &:active {
            border-color: var(--kit-btn-main-light);
            background-color: var(--kit-btn-main-light);
        }

        &:disabled {
            color: var(--kit-btn-disabled-color);
            background-color: transparent;
            border-color: transparent;
        }
    }

    &.kit-btn-segmented {
        border-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);

        &.kit-btn-segmented-active {
            background-color: var(--kit-btn-main-light);
            border-color: var(--kit-btn-main-color);
            z-index: 2;
        }
    }

    .kit-btn-segmented-actived-icon {
        position: absolute;
        z-index: 2;
        bottom: 6px;
        right: 5px;
        color: var(--kit-btn-main-color);
        font-size: convertToPixel(--general-typography-fontSize7);
    }

    &.kit-btn-icon-only {
        padding: convertToPixel(--general-spacing-none);
        justify-content: center;
    }

    &.kit-btn-danger,
    &.kit-btn-danger-modal {
        --kit-btn-main-color: var(--general-utilities-error-default);
        --kit-btn-main-light: var(--general-utilities-error-light);
        --kit-btn-main-focus: var(--general-utilities-error-default);
        --kit-btn-main-dark: var(--general-utilities-error-dark);
        --kit-btn-main-dark-deep: var(--general-utilities-error-dark);
        --kit-btn-invert-color: var(--general-utilities-light);

        &.kit-btn-primary:not(:disabled) {
            border-color: var(--kit-btn-main-color);
        }

        &.kit-btn-secondary:not(:disabled),
        &.kit-btn-segmented:not(:disabled) {
            border-color: var(--general-utilities-error-medium);
        }

        &.kit-btn-primary:not(:disabled):hover {
            border-color: var(--kit-btn-main-dark);
        }

        &.kit-btn-danger-modal {
            border-color: var(--kit-btn-main-color);
        }
    }

    @include defaultTokens('primary', 'color-primary', 'primary', 'blue');
    @include defaultTokens('secondary', 'color-warning', 'warning', 'orange');
    @include defaultTokens('secondary', 'color-error', 'error', 'red');
    @include defaultTokens('secondary', 'color-success', 'success', 'green');
    @include defaultTokens('tertiary', 'color-yellow', 'yellow', 'yellow');
    @include defaultTokens('tertiary', 'color-pink', 'pink', 'pink');
    @include defaultTokens('neutral', 'color-grey', 'grey', 'grey');
}

.ant-space-compact:not(.ant-space-compact-vertical) :local(.kit-btn) {
    border-radius: convertToPixel(--general-border-radius-square);

    &:hover {
        z-index: 2;
    }

    &:not(:last-child) {
        margin-inline-end: -1px;
    }

    &:first-child {
        border-start-start-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);
        border-end-start-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);
    }

    &:last-child {
        border-start-end-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);
        border-end-end-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);
        margin-left: -1px;
    }
}

.ant-space-compact-vertical :local(.kit-btn) {
    border-radius: convertToPixel(--general-border-radius-square);

    &:not(:last-child) {
        margin-top: -1px;
    }

    &:first-child {
        border-top-left-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);
        border-top-right-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);
    }

    &:last-child {
        border-bottom-left-radius: convertToPixel(--components-Button-border-radius-compact, --general-border-radius-s);
        border-bottom-right-radius: convertToPixel(
            --components-Button-border-radius-compact,
            --general-border-radius-s
        );
        margin-top: -1px;
    }
}
